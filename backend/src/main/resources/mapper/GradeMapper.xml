<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.education.mapper.GradeMapper">
    <select id="findByStudentId" resultType="com.education.dto.GradeDTO">
        SELECT 
            g.id,
            c.name as courseName,
            t.name as teacherName,
            g.score,
            c.semester,
            c.credit
        FROM grade g
        JOIN course c ON g.course_id = c.id
        JOIN teacher t ON c.teacher_id = t.id
        WHERE g.student_id = #{studentId}
        <if test="semester != null">
            AND c.semester = #{semester}
        </if>
        ORDER BY c.semester DESC, c.name ASC
    </select>
    
    <select id="findStudentsByCourseId" resultType="com.education.dto.StudentGradeDTO">
        SELECT 
            s.id as studentId,
            s.name as studentName,
            g.course_id as courseId,
            c.name as courseName,
            g.score,
            c.semester
        FROM student s
        JOIN course_selection cs ON s.id = cs.student_id
        JOIN course c ON cs.course_id = c.id
        LEFT JOIN grade g ON s.id = g.student_id AND c.id = g.course_id
        WHERE c.id = #{courseId}
    </select>

    <update id="updateGrade">
        UPDATE grade 
        SET score = #{score}
        WHERE student_id = #{studentId} AND course_id = #{courseId}
    </update>

    <update id="batchUpdateGrades">
        <foreach collection="list" item="grade" separator=";">
            UPDATE grade 
            SET score = #{grade.score}
            WHERE student_id = #{grade.studentId} 
            AND course_id = #{grade.courseId}
        </foreach>
    </update>

    <insert id="insert">
        INSERT INTO grade (student_id, course_id, score)
        VALUES (#{studentId}, #{courseId}, #{score})
    </insert>

    <delete id="delete">
        DELETE FROM grade WHERE id = #{id}
    </delete>

    <select id="getCourseGrades" resultType="com.education.entity.StudentGrade">
        SELECT 
            s.id as studentId,
            s.name as studentName,
            s.class_id as className,
            g.score as score,
            g.created_at as updateTime
        FROM student s
        LEFT JOIN grade g ON s.id = g.student_id AND g.course_id = #{courseId}
        WHERE s.id IN (
            SELECT student_id FROM course_selection WHERE course_id = #{courseId}
        )
    </select>

    <update id="updateGradeWithExam">
        INSERT INTO grade (course_id, student_id, score, created_at)
        VALUES (#{courseId}, #{studentId}, #{score}, #{updateTime})
        ON DUPLICATE KEY UPDATE
        score = #{score},
        created_at = #{updateTime}
    </update>

    <update id="publishGrades">
        UPDATE grade SET is_published = 1 WHERE course_id = #{courseId}
    </update>

    <select id="getCourseAverageGrades" resultType="java.util.Map">
        SELECT c.name as course_name,
               AVG(g.score) as average_score
        FROM course c
        LEFT JOIN grade g ON c.id = g.course_id
        WHERE g.is_published = true
        GROUP BY c.id, c.name
    </select>
    
    <select id="getGradeDistribution" resultType="java.util.Map">
        SELECT 
            COUNT(CASE WHEN score &gt;= 90 THEN 1 END) as A,
            COUNT(CASE WHEN score &gt;= 80 AND score &lt; 90 THEN 1 END) as B,
            COUNT(CASE WHEN score &gt;= 70 AND score &lt; 80 THEN 1 END) as C,
            COUNT(CASE WHEN score &gt;= 60 AND score &lt; 70 THEN 1 END) as D,
            COUNT(CASE WHEN score &lt; 60 THEN 1 END) as F
        FROM grade
        WHERE is_published = true
    </select>
    
    <select id="getCoursePassRates" resultType="java.util.Map">
        SELECT c.name,
               COUNT(CASE WHEN g.score &gt;= 60 THEN 1 END) * 100.0 / COUNT(*) as pass_rate
        FROM course c
        LEFT JOIN grade g ON c.id = g.course_id
        WHERE g.is_published = true
        GROUP BY c.id, c.name
    </select>
    
    <select id="findGradeAlerts" resultType="java.util.Map">
        SELECT s.name as student_name,
               c.name as course_name,
               g.score,
               t.name as teacher_name,
               s.id as student_id,
               c.id as course_id
        FROM grade g
        JOIN student s ON g.student_id = s.id
        JOIN course c ON g.course_id = c.id
        JOIN teacher t ON c.teacher_id = t.id
        WHERE g.score &lt; (
            SELECT CAST(value AS SIGNED)
            FROM system_settings
            WHERE `key` = 'grade_alert_threshold'
        )
        ORDER BY g.score ASC
    </select>

    <select id="findScore" resultType="java.lang.Integer">
        SELECT score
        FROM grade
        WHERE student_id = #{studentId} AND course_id = #{courseId}
    </select>

    <select id="getCourseStatistics" resultType="java.util.Map">
        SELECT 
            c.id as courseId,
            c.name as courseName,
            COUNT(g.score) as totalStudents,
            AVG(g.score) as avgScore,
            MAX(g.score) as maxScore,
            MIN(g.score) as minScore,
            SUM(CASE WHEN g.score &gt;= 60 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as passRate
        FROM course c
        LEFT JOIN grade g ON c.id = g.course_id
        GROUP BY c.id, c.name
    </select>

    <select id="getStudentStatistics" resultType="java.util.Map">
        SELECT 
            s.id as studentId,
            s.name as studentName,
            COUNT(g.score) as totalCourses,
            AVG(g.score) as avgScore,
            SUM(CASE WHEN g.score &gt;= 60 THEN 1 ELSE 0 END) as passedCourses
        FROM student s
        LEFT JOIN grade g ON s.id = g.student_id
        GROUP BY s.id, s.name
    </select>

    <select id="findGradeAlertsByStudentId" resultType="com.education.dto.GradeAlertDTO">
        SELECT 
            g.id,
            c.name as courseName,
            t.name as teacherName,
            g.score,
            c.id as courseId,
            s.id as studentId,
            s.name as studentName
        FROM grade g
        JOIN course c ON g.course_id = c.id
        JOIN teacher t ON c.teacher_id = t.id
        JOIN student s ON g.student_id = s.id
        WHERE g.student_id = #{studentId}
        AND g.score &lt; (
            SELECT CAST(value AS SIGNED)
            FROM system_settings
            WHERE `key` = 'grade_alert_threshold'
        )
        ORDER BY g.score ASC
    </select>
</mapper> 